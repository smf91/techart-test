[{"/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/index.tsx":"1","/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/reportWebVitals.ts":"2","/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/App.tsx":"3","/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/component/Calculate Component.tsx":"4","/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/redux/calculate-reducer.ts":"5","/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/api/api.ts":"6","/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/redux/redux-store.ts":"7"},{"size":502,"mtime":1608809143235,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1608725572391,"results":"10","hashOfConfig":"9"},{"size":272,"mtime":1608809366623,"results":"11","hashOfConfig":"9"},{"size":4447,"mtime":1608756277533,"results":"12","hashOfConfig":"9"},{"size":4284,"mtime":1608758221145,"results":"13","hashOfConfig":"9"},{"size":661,"mtime":1608737934444,"results":"14","hashOfConfig":"9"},{"size":758,"mtime":1608754692745,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11wx85b",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/index.tsx",[],"/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/reportWebVitals.ts",[],["34","35"],"/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/App.tsx",["36"],"/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/component/Calculate Component.tsx",["37"],"import React, { useState } from 'react'\nimport {connect} from 'react-redux'\nimport {compose} from 'redux'\nimport { Radio } from 'antd'\nimport cls from './Calculate-Component.module.scss'\nimport {AppStateType} from '../redux/redux-store'\nimport {cancelChanges} from '../redux/calculate-reducer'\n\n\n\n//-----TYPE BLOCK\ntype MapStateToPropsType = {\n    // users: Array <any>,\n    // pageSize: number,\n    // totalUsersCount: number\n    // currentPage: number,\n    // isFetching: boolean,\n    // followingInProgress: Array<number>\n}\ntype MapDispathPropsType= {\n    cancelChanges: ()=> void\n    // getUsersTC: (currentPage: number, pageSize: number) => void,\n    // onPageChangetTC: (currentPage: number, pageSize: number) => void,\n    // followTC:(userID: number)=> void,\n    // unfollowTC:(userID: number)=> void      \n}\ntype OwnPropsType={}\n\ntype PropsType = MapStateToPropsType & MapDispathPropsType & OwnPropsType\n\n// ----------\n\n\nconst CalculateComponent: React.FC<PropsType>  = ({cancelChanges, ...props }) => {\n    const [stepValue, setStepValue] = useState(1)\n\n    const swichStep = (stepValue: number): any => {\n        switch (stepValue) {\n            case 1:\n                return Step1\n            case 2:\n                return Step2\n            case 3:\n                return Step3\n            case 4:\n                return Step4\n            case 5:\n                return Step5\n            // default:\n            //     return Step2\n        }\n    }\n\n    const SomeTag = swichStep(stepValue)\n    return (\n        <>\n            <div className={cls.calculateBlock}>\n                <div className={cls.titleBlock}>\n                    <span>Калькулятор цены конструкции</span>\n                </div>\n                {\n                    (stepValue === 0 || stepValue > 5)\n                        ? <>\n                            <span>результат</span>\n                            <div className={cls.formBlock}>\n                                ssssssss\n                            </div>\n                            <div className={cls.buttonBlock}>\n                                <button>Начать расчет</button>\n                            </div>\n                        </>\n                        : <SomeTag cancelChanges={cancelChanges} />\n                }\n            </div>\n        </>\n    )\n}\n\nconst Step1 = () => {\n\n    const [value, setValue] = React.useState(1);\n\n    const onChange = (e : any) => {\n        console.log('radio checked', e.target.value);\n        setValue(e.target.value);\n    };\n    return (\n        <>\n            <span></span>\n            <div className={cls.formBlock}>\n                <Radio.Group onChange={onChange} value={value}>\n                    <Radio value={1}>Жилой дом</Radio>\n                    <Radio value={2}>Гараж</Radio>\n                </Radio.Group>\n            </div>\n            <div className={cls.buttonBlock}>\n                <button>Отменить</button>\n                <button>Далее</button>\n            </div>\n        </>\n    )\n}\n\nconst Step2 = () => {\n    return (\n        <>\n            <div className={cls.formBlock}>\n                123\n            </div>\n            <div className={cls.buttonBlock}>\n                <button>Начать расчет</button>\n            </div>\n        </>\n    )\n}\n\nconst Step3 = () => {\n    return (\n        <>\n            <div className={cls.formBlock}>\n                123\n            </div>\n            <div className={cls.buttonBlock}>\n                <button>Начать расчет</button>\n            </div>\n        </>\n    )\n}\nconst Step4 = () => {\n    return (\n        <>\n            <div className={cls.formBlock}>\n                123\n            </div>\n            <div className={cls.buttonBlock}>\n                <button>Начать расчет</button>\n            </div>\n        </>\n    )\n}\n\nconst Step5 = () => {\n    return (\n        <>\n            <div className={cls.formBlock}>\n                123\n            </div>\n            <div className={cls.buttonBlock}>\n                <button>Начать расчет</button>\n            </div>\n        </>\n    )\n}\n\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n\n    }\n}\n\nexport default compose(\n    connect<MapStateToPropsType, MapDispathPropsType, OwnPropsType, AppStateType>\n    (mapStateToProps, {\n        cancelChanges\n    })\n)\n    (CalculateComponent)","/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/redux/calculate-reducer.ts",["38","39"],"import { Dispatch } from 'redux'\nimport { ThunkAction } from 'redux-thunk'\nimport { AppStateType } from './redux-store'\nimport { calculateAPI } from '../api/api'\n\nconst SET_TYPE_BUILDING = \"SET_TYPE_BUILDING\"\nconst SET_NUMBERS_OF_FLOORS = \"SET_NUMBERS_OF_FLOORS\"\nconst SET_WALL_SIZE = \"SET_WALL_SIZE\"\nconst SET_MATERIAL_BUILDING = \"SET_MATERIAL_BUILDING\"\nconst SET_RESULT = \"SET_RESULT\"\nconst CANCEL_CHANGES = \"CANCEL_CHANGES\"\nconst SET_STEP_VALUE = \"SET_STEP_VALUE\"\n\nexport type InitialStateType = {\n    typeBuilding: number | null\n    numbersOfFloors: number | null\n    materialBuilding: string | null\n    result: string | null\n    stepValue: number\n    wallSize: Array<number> | null\n    material: Array<object>\n\n}\n\nlet initialState: InitialStateType = {\n    typeBuilding: null,\n    numbersOfFloors: null,\n    materialBuilding: null,\n    wallSize: null,\n    result: null,\n    stepValue: 0,\n    material: [{ 1: \"кирпич\" }, { 2: \"шлакоблок\" }, { 3: \"деревянный брус\" }, { 4: \"металл\" }, { 5: \"сендвич-панели\" }]\n}\n\nconst calculateReducer = (state = initialState, action: any): InitialStateType => {\n    switch (action.type) {\n        case CANCEL_CHANGES:\n            return {\n                ...state\n            }\n        case SET_STEP_VALUE:\n            return {\n                ...state, stepValue: state.stepValue++\n            }\n        case SET_TYPE_BUILDING:\n            return {\n                ...state, typeBuilding: action.typeBuildingValue\n            }\n        case SET_NUMBERS_OF_FLOORS:\n            return {\n                ...state, numbersOfFloors: action.numbersOfFloorsValue\n            }\n        default:\n            return state\n    }\n}\n// --------------------------------\ntype ActionsTypes = SetNumbersOfFloorsActionType | SetNumbersOfFloorsActionType | SetWallSizeActionType\n    | SetMaterialBuildingActionType | CancelChangesActionType\n// --------------------------------\ntype SetTypeBuildingActionType = {\n    type: typeof SET_TYPE_BUILDING,\n    typeBuildingValue: number\n}\nexport const setTypeBuilding = (typeBuildingValue: number): SetTypeBuildingActionType => ({ type: SET_TYPE_BUILDING, typeBuildingValue })\n\ntype SetNumbersOfFloorsActionType = {\n    type: typeof SET_NUMBERS_OF_FLOORS,\n    numbersOfFloorsValue: number\n}\nexport const setNumbersOfFloors = (numbersOfFloorsValue: number): SetNumbersOfFloorsActionType => ({ type: SET_NUMBERS_OF_FLOORS, numbersOfFloorsValue })\n\ntype SetWallSizeActionType = {\n    type: typeof SET_WALL_SIZE,\n    WallSizeValue: number\n}\nexport const setWallSize = (WallSizeValue: number): SetWallSizeActionType => ({ type: SET_WALL_SIZE, WallSizeValue })\n\ntype SetMaterialBuildingActionType = {\n    type: typeof SET_MATERIAL_BUILDING,\n    materialBuildingValue: string\n}\nexport const setMaterialBuilding = (materialBuildingValue: string): SetMaterialBuildingActionType => ({ type: SET_MATERIAL_BUILDING, materialBuildingValue })\n\ntype SetResultActionType = {\n    type: typeof SET_RESULT,\n    result: string\n}\nexport const setResult = (result: string): SetResultActionType => ({ type: SET_RESULT, result })\n\ntype CancelChangesActionType = {\n    type: typeof CANCEL_CHANGES,\n}\nexport const cancelChanges = (): CancelChangesActionType => ({ type: CANCEL_CHANGES })\n\ntype setStepValueActionType = {\n    type: typeof SET_STEP_VALUE,\n}\nexport const setStepValue = (): setStepValueActionType => ({ type: SET_STEP_VALUE })\n// --------------------------------\n// Thunk creater\ntype DispatchType = Dispatch<ActionsTypes>\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\n\n// export const calculateTC = (): ThunkType => async (dispatch: any) => {\n//     let data = await calculateAPI.calculate(initialState.typeBuilding, initialState.numbersOfFloors, initialState.materialBuilding, initialState.wallSize)\n//     if (data.resultCode === 0) {\n//         // сетаем статус в наш глобальный стейт\n//         // dispatch(setUserStatus(status))\n//         alert('thunk api')\n//     }\n// }\n\nexport const setTypeBuildingTC = (typeBuildingValue: number): ThunkType => {\n    return async (dispatch: any) => {\n        dispatch(setStepValue())\n        dispatch(setTypeBuilding(typeBuildingValue))\n    }\n}\n\nexport default calculateReducer","/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/api/api.ts",[],["40","41"],"/Users/SMF/Documents/GIT/techart-test/my-app-techart/src/redux/redux-store.ts",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":2,"column":10,"nodeType":"48","messageId":"49","endLine":2,"endColumn":18},{"ruleId":"46","severity":1,"message":"50","line":35,"column":23,"nodeType":"48","messageId":"49","endLine":35,"endColumn":35},{"ruleId":"46","severity":1,"message":"51","line":4,"column":10,"nodeType":"48","messageId":"49","endLine":4,"endColumn":22},{"ruleId":"46","severity":1,"message":"52","line":102,"column":6,"nodeType":"48","messageId":"49","endLine":102,"endColumn":18},{"ruleId":"42","replacedBy":"53"},{"ruleId":"44","replacedBy":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"@typescript-eslint/no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'setStepValue' is assigned a value but never used.","'calculateAPI' is defined but never used.","'DispatchType' is defined but never used.",["55"],["56"],"no-global-assign","no-unsafe-negation"]